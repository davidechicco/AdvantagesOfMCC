fileName: ../data/myColonCancerDataset9.csv
targetName: aaa
script_dir: .
Read data from file ../data/myColonCancerDataset9.csv
Number of executions = 10
perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.8472444
ROC AUC 		0.65625


TOTAL:

 FN =  2  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.000 	 0.706 	 0.583 	 0.750 	 0.250		 0.847		0.656

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.9470072
ROC AUC 		0.725


TOTAL:

 FN =  2  /  10 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  10 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  2 	 (truth == 0) & (prediction >= threshold)
 TN =  0  /  2 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      -0.200 	 0.800 	 0.667 	 0.800 	 0.000		 0.947		0.725

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.8700112
ROC AUC 		0.8611111


TOTAL:

 FN =  0  /  6 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  6 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  6 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  6 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.707 	 0.857 	 0.833 	 1.000 	 0.667		 0.870		0.861

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.813049
ROC AUC 		0.6296296


TOTAL:

 FN =  0  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  9  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.522 	 0.900 	 0.833 	 1.000 	 0.333		 0.813		0.630

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.7635056
ROC AUC 		0.7361111


TOTAL:

 FN =  0  /  6 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  6 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  6 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  6 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.447 	 0.750 	 0.667 	 1.000 	 0.333		 0.764		0.736

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.9720617
ROC AUC 		0.85


TOTAL:

 FN =  1  /  10 	 (truth == 1) & (prediction < threshold)
 TP =  9  /  10 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  2 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  2 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.400 	 0.900 	 0.833 	 0.900 	 0.500		 0.972		0.850

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.7429413
ROC AUC 		0.59375


TOTAL:

 FN =  3  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      -0.125 	 0.625 	 0.500 	 0.625 	 0.250		 0.743		0.594

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.9819934
ROC AUC 		0.9714286


TOTAL:

 FN =  0  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.683 	 0.875 	 0.833 	 1.000 	 0.600		 0.982		0.971

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.933025
ROC AUC 		0.8148148


TOTAL:

 FN =  0  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  9  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.522 	 0.900 	 0.833 	 1.000 	 0.333		 0.933		0.815

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 1999
[1] "dim(test_set)"
[1]   12 1999

PR AUC (integral) 	0.6267951
ROC AUC 		0.5857143


TOTAL:

 FN =  2  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.120 	 0.667 	 0.583 	 0.714 	 0.400		 0.627		0.586




=== final results ===
Number of executions = 10
         MCC F1_score accuracy TP_rate TN_rate PR_AUC ROC_AUC
mean    0.31     0.80     0.72    0.88    0.37   0.85    0.74
std.dev 0.33     0.10     0.13    0.14    0.19   0.12    0.13


=== === === ===
fileName: ../data/myColonCancerDataset9.csv
targetName: aaa
script_dir: .
fileName = ../data/myColonCancerDataset9.csv
Number of executions = 10
[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.4605662

When C=1, the MCC value is 0.4605662	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.7200823

When C=10, the MCC value is 0.7200823	 (worst possible: -1; best possible: +1)

The best C value is 10, corresponding to MCC=0.720082299823096
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=10) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.7243575
ROC AUC 		0.5925926


TOTAL:

 FN =  0  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  9  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.522 	 0.900 	 0.833 	 1.000 	 0.333		 0.724		0.593

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0

When C=1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.843274

When C=10, the MCC value is 0.843274	 (worst possible: -1; best possible: +1)

The best C value is 10, corresponding to MCC=0.843274042711568
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=10) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.885331
ROC AUC 		0.7714286


TOTAL:

 FN =  2  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.120 	 0.667 	 0.583 	 0.714 	 0.400		 0.885		0.771

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0

When C=1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.6388889

When C=10, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)

The best C value is 10, corresponding to MCC=0.638888888888889
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=10) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.817716
ROC AUC 		0.8571429


TOTAL:

 FN =  0  /  5 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  5 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  7 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  7 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.598 	 0.769 	 0.750 	 1.000 	 0.571		 0.818		0.857

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.5270463

When C=1, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.5270463

When C=10, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

The best C value is 1, corresponding to MCC=0.52704627669473
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=1) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8974696
ROC AUC 		0.8285714


TOTAL:

 FN =  1  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.293 	 0.750 	 0.667 	 0.857 	 0.400		 0.897		0.829

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0

When C=1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.8215838

When C=10, the MCC value is 0.8215838	 (worst possible: -1; best possible: +1)

The best C value is 10, corresponding to MCC=0.821583836257749
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=10) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.97882
ROC AUC 		0.9259259


TOTAL:

 FN =  2  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.683 	 0.875 	 0.833 	 0.778 	 1.000		 0.979		0.926

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.843274

When C=1, the MCC value is 0.843274	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.6388889

When C=10, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)

The best C value is 1, corresponding to MCC=0.843274042711568
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=1) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8063849
ROC AUC 		0.59375


TOTAL:

 FN =  1  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.158 	 0.778 	 0.667 	 0.875 	 0.250		 0.806		0.594

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.5270463

When C=1, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.6928203

When C=10, the MCC value is 0.6928203	 (worst possible: -1; best possible: +1)

The best C value is 10, corresponding to MCC=0.692820323027551
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=10) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.7689509
ROC AUC 		0.7777778


TOTAL:

 FN =  0  /  6 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  6 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  6 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  6 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.707 	 0.857 	 0.833 	 1.000 	 0.667		 0.769		0.778

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0

When C=1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0

When C=10, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.9055082
ROC AUC 		0.8125


TOTAL:

 FN =  0  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  0  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.000 	 0.800 	 0.667 	 1.000 	 0.000		 0.906		0.812

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.4605662

When C=1, the MCC value is 0.4605662	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.3809524

When C=10, the MCC value is 0.3809524	 (worst possible: -1; best possible: +1)

The best C value is 1, corresponding to MCC=0.460566186471838
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=1) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.9852771
ROC AUC 		0.96875


TOTAL:

 FN =  0  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  0  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.000 	 0.800 	 0.667 	 1.000 	 0.000		 0.985		0.969

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.001, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.01, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0

When C=0.1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0

When C=1, the MCC value is 0	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.03042903

When C=10, the MCC value is 0.03042903	 (worst possible: -1; best possible: +1)

The best C value is 10, corresponding to MCC=0.0304290309725092
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=10) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8111777
ROC AUC 		0.7714286


TOTAL:

 FN =  2  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.314 	 0.714 	 0.667 	 0.714 	 0.600		 0.811		0.771




=== final results ===
Number of executions = 10
         MCC F1_score accuracy TP_rate TN_rate PR_AUC ROC_AUC
mean    0.34     0.79     0.72    0.89    0.42   0.86    0.79
std.dev 0.27     0.07     0.09    0.12    0.31   0.09    0.12


=== === === ===
fileName: ../data/myColonCancerDataset9.csv
targetName: aaa
script_dir: .
fileName = ../data/myColonCancerDataset9.csv
   [1] "X2"    "X3"    "X4"    "X5"    "X6"    "X7"    "X8"    "X9"    "X10"  
  [10] "X11"   "X12"   "X13"   "X14"   "X15"   "X16"   "X17"   "X18"   "X19"  
  [19] "X20"   "X21"   "X22"   "X23"   "X24"   "X25"   "X26"   "X27"   "X28"  
  [28] "X29"   "X30"   "X31"   "X32"   "X33"   "X34"   "X35"   "X36"   "X37"  
  [37] "X38"   "X39"   "X40"   "X41"   "X42"   "X43"   "X44"   "X45"   "X46"  
  [46] "X47"   "X48"   "X49"   "X50"   "X51"   "X52"   "X53"   "X54"   "X55"  
  [55] "X56"   "X57"   "X58"   "X59"   "X60"   "X61"   "X62"   "X63"   "X64"  
  [64] "X65"   "X66"   "X67"   "X68"   "X69"   "X70"   "X71"   "X72"   "X73"  
  [73] "X74"   "X75"   "X76"   "X77"   "X78"   "X79"   "X80"   "X81"   "X82"  
  [82] "X83"   "X84"   "X85"   "X86"   "X87"   "X88"   "X89"   "X90"   "X91"  
  [91] "X92"   "X93"   "X94"   "X95"   "X96"   "X97"   "X98"   "X99"   "X100" 
 [100] "X101"  "X102"  "X103"  "X104"  "X105"  "X106"  "X107"  "X108"  "X109" 
 [109] "X110"  "X111"  "X112"  "X113"  "X114"  "X115"  "X116"  "X117"  "X118" 
 [118] "X119"  "X120"  "X121"  "X122"  "X123"  "X124"  "X125"  "X126"  "X127" 
 [127] "X128"  "X129"  "X130"  "X131"  "X132"  "X133"  "X134"  "X135"  "X136" 
 [136] "X137"  "X138"  "X139"  "X140"  "X141"  "X142"  "X143"  "X144"  "X145" 
 [145] "X146"  "X147"  "X148"  "X149"  "X150"  "X151"  "X152"  "X153"  "X154" 
 [154] "X155"  "X156"  "X157"  "X158"  "X159"  "X160"  "X161"  "X162"  "X163" 
 [163] "X164"  "X165"  "X166"  "X167"  "X168"  "X169"  "X170"  "X171"  "X172" 
 [172] "X173"  "X174"  "X175"  "X176"  "X177"  "X178"  "X179"  "X180"  "X181" 
 [181] "X182"  "X183"  "X184"  "X185"  "X186"  "X187"  "X188"  "X189"  "X190" 
 [190] "X191"  "X192"  "X193"  "X194"  "X195"  "X196"  "X197"  "X198"  "X199" 
 [199] "X200"  "X201"  "X202"  "X203"  "X204"  "X205"  "X206"  "X207"  "X208" 
 [208] "X209"  "X210"  "X211"  "X212"  "X213"  "X214"  "X215"  "X216"  "X217" 
 [217] "X218"  "X219"  "X220"  "X221"  "X222"  "X223"  "X224"  "X225"  "X226" 
 [226] "X227"  "X228"  "X229"  "X230"  "X231"  "X232"  "X233"  "X234"  "X235" 
 [235] "X236"  "X237"  "X238"  "X239"  "X240"  "X241"  "X242"  "X243"  "X244" 
 [244] "X245"  "X246"  "X247"  "X248"  "X249"  "X250"  "X251"  "X252"  "X253" 
 [253] "X254"  "X255"  "X256"  "X257"  "X258"  "X259"  "X260"  "X261"  "X262" 
 [262] "X263"  "X264"  "X265"  "X266"  "X267"  "X268"  "X269"  "X270"  "X271" 
 [271] "X272"  "X273"  "X274"  "X275"  "X276"  "X277"  "X278"  "X279"  "X280" 
 [280] "X281"  "X282"  "X283"  "X284"  "X285"  "X286"  "X287"  "X288"  "X289" 
 [289] "X290"  "X291"  "X292"  "X293"  "X294"  "X295"  "X296"  "X297"  "X298" 
 [298] "X299"  "X300"  "X301"  "X302"  "X303"  "X304"  "X305"  "X306"  "X307" 
 [307] "X308"  "X309"  "X310"  "X311"  "X312"  "X313"  "X314"  "X315"  "X316" 
 [316] "X317"  "X318"  "X319"  "X320"  "X321"  "X322"  "X323"  "X324"  "X325" 
 [325] "X326"  "X327"  "X328"  "X329"  "X330"  "X331"  "X332"  "X333"  "X334" 
 [334] "X335"  "X336"  "X337"  "X338"  "X339"  "X340"  "X341"  "X342"  "X343" 
 [343] "X344"  "X345"  "X346"  "X347"  "X348"  "X349"  "X350"  "X351"  "X352" 
 [352] "X353"  "X354"  "X355"  "X356"  "X357"  "X358"  "X359"  "X360"  "X361" 
 [361] "X362"  "X363"  "X364"  "X365"  "X366"  "X367"  "X368"  "X369"  "X370" 
 [370] "X371"  "X372"  "X373"  "X374"  "X375"  "X376"  "X377"  "X378"  "X379" 
 [379] "X380"  "X381"  "X382"  "X383"  "X384"  "X385"  "X386"  "X387"  "X388" 
 [388] "X389"  "X390"  "X391"  "X392"  "X393"  "X394"  "X395"  "X396"  "X397" 
 [397] "X398"  "X399"  "X400"  "X401"  "X402"  "X403"  "X404"  "X405"  "X406" 
 [406] "X407"  "X408"  "X409"  "X410"  "X411"  "X412"  "X413"  "X414"  "X415" 
 [415] "X416"  "X417"  "X418"  "X419"  "X420"  "X421"  "X422"  "X423"  "X424" 
 [424] "X425"  "X426"  "X427"  "X428"  "X429"  "X430"  "X431"  "X432"  "X433" 
 [433] "X434"  "X435"  "X436"  "X437"  "X438"  "X439"  "X440"  "X441"  "X442" 
 [442] "X443"  "X444"  "X445"  "X446"  "X447"  "X448"  "X449"  "X450"  "X451" 
 [451] "X452"  "X453"  "X454"  "X455"  "X456"  "X457"  "X458"  "X459"  "X460" 
 [460] "X461"  "X462"  "X463"  "X464"  "X465"  "X466"  "X467"  "X468"  "X469" 
 [469] "X470"  "X471"  "X472"  "X473"  "X474"  "X475"  "X476"  "X477"  "X478" 
 [478] "X479"  "X480"  "X481"  "X482"  "X483"  "X484"  "X485"  "X486"  "X487" 
 [487] "X488"  "X489"  "X490"  "X491"  "X492"  "X493"  "X494"  "X495"  "X496" 
 [496] "X497"  "X498"  "X499"  "X500"  "X501"  "X502"  "X503"  "X504"  "X505" 
 [505] "X506"  "X507"  "X508"  "X509"  "X510"  "X511"  "X512"  "X513"  "X514" 
 [514] "X515"  "X516"  "X517"  "X518"  "X519"  "X520"  "X521"  "X522"  "X523" 
 [523] "X524"  "X525"  "X526"  "X527"  "X528"  "X529"  "X530"  "X531"  "X532" 
 [532] "X533"  "X534"  "X535"  "X536"  "X537"  "X538"  "X539"  "X540"  "X541" 
 [541] "X542"  "X543"  "X544"  "X545"  "X546"  "X547"  "X548"  "X549"  "X550" 
 [550] "X551"  "X552"  "X553"  "X554"  "X555"  "X556"  "X557"  "X558"  "X559" 
 [559] "X560"  "X561"  "X562"  "X563"  "X564"  "X565"  "X566"  "X567"  "X568" 
 [568] "X569"  "X570"  "X571"  "X572"  "X573"  "X574"  "X575"  "X576"  "X577" 
 [577] "X578"  "X579"  "X580"  "X581"  "X582"  "X583"  "X584"  "X585"  "X586" 
 [586] "X587"  "X588"  "X589"  "X590"  "X591"  "X592"  "X593"  "X594"  "X595" 
 [595] "X596"  "X597"  "X598"  "X599"  "X600"  "X601"  "X602"  "X603"  "X604" 
 [604] "X605"  "X606"  "X607"  "X608"  "X609"  "X610"  "X611"  "X612"  "X613" 
 [613] "X614"  "X615"  "X616"  "X617"  "X618"  "X619"  "X620"  "X621"  "X622" 
 [622] "X623"  "X624"  "X625"  "X626"  "X627"  "X628"  "X629"  "X630"  "X631" 
 [631] "X632"  "X633"  "X634"  "X635"  "X636"  "X637"  "X638"  "X639"  "X640" 
 [640] "X641"  "X642"  "X643"  "X644"  "X645"  "X646"  "X647"  "X648"  "X649" 
 [649] "X650"  "X651"  "X652"  "X653"  "X654"  "X655"  "X656"  "X657"  "X658" 
 [658] "X659"  "X660"  "X661"  "X662"  "X663"  "X664"  "X665"  "X666"  "X667" 
 [667] "X668"  "X669"  "X670"  "X671"  "X672"  "X673"  "X674"  "X675"  "X676" 
 [676] "X677"  "X678"  "X679"  "X680"  "X681"  "X682"  "X683"  "X684"  "X685" 
 [685] "X686"  "X687"  "X688"  "X689"  "X690"  "X691"  "X692"  "X693"  "X694" 
 [694] "X695"  "X696"  "X697"  "X698"  "X699"  "X700"  "X701"  "X702"  "X703" 
 [703] "X704"  "X705"  "X706"  "X707"  "X708"  "X709"  "X710"  "X711"  "X712" 
 [712] "X713"  "X714"  "X715"  "X716"  "X717"  "X718"  "X719"  "X720"  "X721" 
 [721] "X722"  "X723"  "X724"  "X725"  "X726"  "X727"  "X728"  "X729"  "X730" 
 [730] "X731"  "X732"  "X733"  "X734"  "X735"  "X736"  "X737"  "X738"  "X739" 
 [739] "X740"  "X741"  "X742"  "X743"  "X744"  "X745"  "X746"  "X747"  "X748" 
 [748] "X749"  "X750"  "X751"  "X752"  "X753"  "X754"  "X755"  "X756"  "X757" 
 [757] "X758"  "X759"  "X760"  "X761"  "X762"  "X763"  "X764"  "X765"  "X766" 
 [766] "X767"  "X768"  "X769"  "X770"  "X771"  "X772"  "X773"  "X774"  "X775" 
 [775] "X776"  "X777"  "X778"  "X779"  "X780"  "X781"  "X782"  "X783"  "X784" 
 [784] "X785"  "X786"  "X787"  "X788"  "X789"  "X790"  "X791"  "X792"  "X793" 
 [793] "X794"  "X795"  "X796"  "X797"  "X798"  "X799"  "X800"  "X801"  "X802" 
 [802] "X803"  "X804"  "X805"  "X806"  "X807"  "X808"  "X809"  "X810"  "X811" 
 [811] "X812"  "X813"  "X814"  "X815"  "X816"  "X817"  "X818"  "X819"  "X820" 
 [820] "X821"  "X822"  "X823"  "X824"  "X825"  "X826"  "X827"  "X828"  "X829" 
 [829] "X830"  "X831"  "X832"  "X833"  "X834"  "X835"  "X836"  "X837"  "X838" 
 [838] "X839"  "X840"  "X841"  "X842"  "X843"  "X844"  "X845"  "X846"  "X847" 
 [847] "X848"  "X849"  "X850"  "X851"  "X852"  "X853"  "X854"  "X855"  "X856" 
 [856] "X857"  "X858"  "X859"  "X860"  "X861"  "X862"  "X863"  "X864"  "X865" 
 [865] "X866"  "X867"  "X868"  "X869"  "X870"  "X871"  "X872"  "X873"  "X874" 
 [874] "X875"  "X876"  "X877"  "X878"  "X879"  "X880"  "X881"  "X882"  "X883" 
 [883] "X884"  "X885"  "X886"  "X887"  "X888"  "X889"  "X890"  "X891"  "X892" 
 [892] "X893"  "X894"  "X895"  "X896"  "X897"  "X898"  "X899"  "X900"  "X901" 
 [901] "X902"  "X903"  "X904"  "X905"  "X906"  "X907"  "X908"  "X909"  "X910" 
 [910] "X911"  "X912"  "X913"  "X914"  "X915"  "X916"  "X917"  "X918"  "X919" 
 [919] "X920"  "X921"  "X922"  "X923"  "X924"  "X925"  "X926"  "X927"  "X928" 
 [928] "X929"  "X930"  "X931"  "X932"  "X933"  "X934"  "X935"  "X936"  "X937" 
 [937] "X938"  "X939"  "X940"  "X941"  "X942"  "X943"  "X944"  "X945"  "X946" 
 [946] "X947"  "X948"  "X949"  "X950"  "X951"  "X952"  "X953"  "X954"  "X955" 
 [955] "X956"  "X957"  "X958"  "X959"  "X960"  "X961"  "X962"  "X963"  "X964" 
 [964] "X965"  "X966"  "X967"  "X968"  "X969"  "X970"  "X971"  "X972"  "X973" 
 [973] "X974"  "X975"  "X976"  "X977"  "X978"  "X979"  "X980"  "X981"  "X982" 
 [982] "X983"  "X984"  "X985"  "X986"  "X987"  "X988"  "X989"  "X990"  "X991" 
 [991] "X992"  "X993"  "X994"  "X995"  "X996"  "X997"  "X998"  "X999"  "X1000"
[1000] "X1001" "X1002" "X1003" "X1004" "X1005" "X1006" "X1007" "X1008" "X1009"
[1009] "X1010" "X1011" "X1012" "X1013" "X1014" "X1015" "X1016" "X1017" "X1018"
[1018] "X1019" "X1020" "X1021" "X1022" "X1023" "X1024" "X1025" "X1026" "X1027"
[1027] "X1028" "X1029" "X1030" "X1031" "X1032" "X1033" "X1034" "X1035" "X1036"
[1036] "X1037" "X1038" "X1039" "X1040" "X1041" "X1042" "X1043" "X1044" "X1045"
[1045] "X1046" "X1047" "X1048" "X1049" "X1050" "X1051" "X1052" "X1053" "X1054"
[1054] "X1055" "X1056" "X1057" "X1058" "X1059" "X1060" "X1061" "X1062" "X1063"
[1063] "X1064" "X1065" "X1066" "X1067" "X1068" "X1069" "X1070" "X1071" "X1072"
[1072] "X1073" "X1074" "X1075" "X1076" "X1077" "X1078" "X1079" "X1080" "X1081"
[1081] "X1082" "X1083" "X1084" "X1085" "X1086" "X1087" "X1088" "X1089" "X1090"
[1090] "X1091" "X1092" "X1093" "X1094" "X1095" "X1096" "X1097" "X1098" "X1099"
[1099] "X1100" "X1101" "X1102" "X1103" "X1104" "X1105" "X1106" "X1107" "X1108"
[1108] "X1109" "X1110" "X1111" "X1112" "X1113" "X1114" "X1115" "X1116" "X1117"
[1117] "X1118" "X1119" "X1120" "X1121" "X1122" "X1123" "X1124" "X1125" "X1126"
[1126] "X1127" "X1128" "X1129" "X1130" "X1131" "X1132" "X1133" "X1134" "X1135"
[1135] "X1136" "X1137" "X1138" "X1139" "X1140" "X1141" "X1142" "X1143" "X1144"
[1144] "X1145" "X1146" "X1147" "X1148" "X1149" "X1150" "X1151" "X1152" "X1153"
[1153] "X1154" "X1155" "X1156" "X1157" "X1158" "X1159" "X1160" "X1161" "X1162"
[1162] "X1163" "X1164" "X1165" "X1166" "X1167" "X1168" "X1169" "X1170" "X1171"
[1171] "X1172" "X1173" "X1174" "X1175" "X1176" "X1177" "X1178" "X1179" "X1180"
[1180] "X1181" "X1182" "X1183" "X1184" "X1185" "X1186" "X1187" "X1188" "X1189"
[1189] "X1190" "X1191" "X1192" "X1193" "X1194" "X1195" "X1196" "X1197" "X1198"
[1198] "X1199" "X1200" "X1201" "X1202" "X1203" "X1204" "X1205" "X1206" "X1207"
[1207] "X1208" "X1209" "X1210" "X1211" "X1212" "X1213" "X1214" "X1215" "X1216"
[1216] "X1217" "X1218" "X1219" "X1220" "X1221" "X1222" "X1223" "X1224" "X1225"
[1225] "X1226" "X1227" "X1228" "X1229" "X1230" "X1231" "X1232" "X1233" "X1234"
[1234] "X1235" "X1236" "X1237" "X1238" "X1239" "X1240" "X1241" "X1242" "X1243"
[1243] "X1244" "X1245" "X1246" "X1247" "X1248" "X1249" "X1250" "X1251" "X1252"
[1252] "X1253" "X1254" "X1255" "X1256" "X1257" "X1258" "X1259" "X1260" "X1261"
[1261] "X1262" "X1263" "X1264" "X1265" "X1266" "X1267" "X1268" "X1269" "X1270"
[1270] "X1271" "X1272" "X1273" "X1274" "X1275" "X1276" "X1277" "X1278" "X1279"
[1279] "X1280" "X1281" "X1282" "X1283" "X1284" "X1285" "X1286" "X1287" "X1288"
[1288] "X1289" "X1290" "X1291" "X1292" "X1293" "X1294" "X1295" "X1296" "X1297"
[1297] "X1298" "X1299" "X1300" "X1301" "X1302" "X1303" "X1304" "X1305" "X1306"
[1306] "X1307" "X1308" "X1309" "X1310" "X1311" "X1312" "X1313" "X1314" "X1315"
[1315] "X1316" "X1317" "X1318" "X1319" "X1320" "X1321" "X1322" "X1323" "X1324"
[1324] "X1325" "X1326" "X1327" "X1328" "X1329" "X1330" "X1331" "X1332" "X1333"
[1333] "X1334" "X1335" "X1336" "X1337" "X1338" "X1339" "X1340" "X1341" "X1342"
[1342] "X1343" "X1344" "X1345" "X1346" "X1347" "X1348" "X1349" "X1350" "X1351"
[1351] "X1352" "X1353" "X1354" "X1355" "X1356" "X1357" "X1358" "X1359" "X1360"
[1360] "X1361" "X1362" "X1363" "X1364" "X1365" "X1366" "X1367" "X1368" "X1369"
[1369] "X1370" "X1371" "X1372" "X1373" "X1374" "X1375" "X1376" "X1377" "X1378"
[1378] "X1379" "X1380" "X1381" "X1382" "X1383" "X1384" "X1385" "X1386" "X1387"
[1387] "X1388" "X1389" "X1390" "X1391" "X1392" "X1393" "X1394" "X1395" "X1396"
[1396] "X1397" "X1398" "X1399" "X1400" "X1401" "X1402" "X1403" "X1404" "X1405"
[1405] "X1406" "X1407" "X1408" "X1409" "X1410" "X1411" "X1412" "X1413" "X1414"
[1414] "X1415" "X1416" "X1417" "X1418" "X1419" "X1420" "X1421" "X1422" "X1423"
[1423] "X1424" "X1425" "X1426" "X1427" "X1428" "X1429" "X1430" "X1431" "X1432"
[1432] "X1433" "X1434" "X1435" "X1436" "X1437" "X1438" "X1439" "X1440" "X1441"
[1441] "X1442" "X1443" "X1444" "X1445" "X1446" "X1447" "X1448" "X1449" "X1450"
[1450] "X1451" "X1452" "X1453" "X1454" "X1455" "X1456" "X1457" "X1458" "X1459"
[1459] "X1460" "X1461" "X1462" "X1463" "X1464" "X1465" "X1466" "X1467" "X1468"
[1468] "X1469" "X1470" "X1471" "X1472" "X1473" "X1474" "X1475" "X1476" "X1477"
[1477] "X1478" "X1479" "X1480" "X1481" "X1482" "X1483" "X1484" "X1485" "X1486"
[1486] "X1487" "X1488" "X1489" "X1490" "X1491" "X1492" "X1493" "X1494" "X1495"
[1495] "X1496" "X1497" "X1498" "X1499" "X1500" "X1501" "X1502" "X1503" "X1504"
[1504] "X1505" "X1506" "X1507" "X1508" "X1509" "X1510" "X1511" "X1512" "X1513"
[1513] "X1514" "X1515" "X1516" "X1517" "X1518" "X1519" "X1520" "X1521" "X1522"
[1522] "X1523" "X1524" "X1525" "X1526" "X1527" "X1528" "X1529" "X1530" "X1531"
[1531] "X1532" "X1533" "X1534" "X1535" "X1536" "X1537" "X1538" "X1539" "X1540"
[1540] "X1541" "X1542" "X1543" "X1544" "X1545" "X1546" "X1547" "X1548" "X1549"
[1549] "X1550" "X1551" "X1552" "X1553" "X1554" "X1555" "X1556" "X1557" "X1558"
[1558] "X1559" "X1560" "X1561" "X1562" "X1563" "X1564" "X1565" "X1566" "X1567"
[1567] "X1568" "X1569" "X1570" "X1571" "X1572" "X1573" "X1574" "X1575" "X1576"
[1576] "X1577" "X1578" "X1579" "X1580" "X1581" "X1582" "X1583" "X1584" "X1585"
[1585] "X1586" "X1587" "X1588" "X1589" "X1590" "X1591" "X1592" "X1593" "X1594"
[1594] "X1595" "X1596" "X1597" "X1598" "X1599" "X1600" "X1601" "X1602" "X1603"
[1603] "X1604" "X1605" "X1606" "X1607" "X1608" "X1609" "X1610" "X1611" "X1612"
[1612] "X1613" "X1614" "X1615" "X1616" "X1617" "X1618" "X1619" "X1620" "X1621"
[1621] "X1622" "X1623" "X1624" "X1625" "X1626" "X1627" "X1628" "X1629" "X1630"
[1630] "X1631" "X1632" "X1633" "X1634" "X1635" "X1636" "X1637" "X1638" "X1639"
[1639] "X1640" "X1641" "X1642" "X1643" "X1644" "X1645" "X1646" "X1647" "X1648"
[1648] "X1649" "X1650" "X1651" "X1652" "X1653" "X1654" "X1655" "X1656" "X1657"
[1657] "X1658" "X1659" "X1660" "X1661" "X1662" "X1663" "X1664" "X1665" "X1666"
[1666] "X1667" "X1668" "X1669" "X1670" "X1671" "X1672" "X1673" "X1674" "X1675"
[1675] "X1676" "X1677" "X1678" "X1679" "X1680" "X1681" "X1682" "X1683" "X1684"
[1684] "X1685" "X1686" "X1687" "X1688" "X1689" "X1690" "X1691" "X1692" "X1693"
[1693] "X1694" "X1695" "X1696" "X1697" "X1698" "X1699" "X1700" "X1701" "X1702"
[1702] "X1703" "X1704" "X1705" "X1706" "X1707" "X1708" "X1709" "X1710" "X1711"
[1711] "X1712" "X1713" "X1714" "X1715" "X1716" "X1717" "X1718" "X1719" "X1720"
[1720] "X1721" "X1722" "X1723" "X1724" "X1725" "X1726" "X1727" "X1728" "X1729"
[1729] "X1730" "X1731" "X1732" "X1733" "X1734" "X1735" "X1736" "X1737" "X1738"
[1738] "X1739" "X1740" "X1741" "X1742" "X1743" "X1744" "X1745" "X1746" "X1747"
[1747] "X1748" "X1749" "X1750" "X1751" "X1752" "X1753" "X1754" "X1755" "X1756"
[1756] "X1757" "X1758" "X1759" "X1760" "X1761" "X1762" "X1763" "X1764" "X1765"
[1765] "X1766" "X1767" "X1768" "X1769" "X1770" "X1771" "X1772" "X1773" "X1774"
[1774] "X1775" "X1776" "X1777" "X1778" "X1779" "X1780" "X1781" "X1782" "X1783"
[1783] "X1784" "X1785" "X1786" "X1787" "X1788" "X1789" "X1790" "X1791" "X1792"
[1792] "X1793" "X1794" "X1795" "X1796" "X1797" "X1798" "X1799" "X1800" "X1801"
[1801] "X1802" "X1803" "X1804" "X1805" "X1806" "X1807" "X1808" "X1809" "X1810"
[1810] "X1811" "X1812" "X1813" "X1814" "X1815" "X1816" "X1817" "X1818" "X1819"
[1819] "X1820" "X1821" "X1822" "X1823" "X1824" "X1825" "X1826" "X1827" "X1828"
[1828] "X1829" "X1830" "X1831" "X1832" "X1833" "X1834" "X1835" "X1836" "X1837"
[1837] "X1838" "X1839" "X1840" "X1841" "X1842" "X1843" "X1844" "X1845" "X1846"
[1846] "X1847" "X1848" "X1849" "X1850" "X1851" "X1852" "X1853" "X1854" "X1855"
[1855] "X1856" "X1857" "X1858" "X1859" "X1860" "X1861" "X1862" "X1863" "X1864"
[1864] "X1865" "X1866" "X1867" "X1868" "X1869" "X1870" "X1871" "X1872" "X1873"
[1873] "X1874" "X1875" "X1876" "X1877" "X1878" "X1879" "X1880" "X1881" "X1882"
[1882] "X1883" "X1884" "X1885" "X1886" "X1887" "X1888" "X1889" "X1890" "X1891"
[1891] "X1892" "X1893" "X1894" "X1895" "X1896" "X1897" "X1898" "X1899" "X1900"
[1900] "X1901" "X1902" "X1903" "X1904" "X1905" "X1906" "X1907" "X1908" "X1909"
[1909] "X1910" "X1911" "X1912" "X1913" "X1914" "X1915" "X1916" "X1917" "X1918"
[1918] "X1919" "X1920" "X1921" "X1922" "X1923" "X1924" "X1925" "X1926" "X1927"
[1927] "X1928" "X1929" "X1930" "X1931" "X1932" "X1933" "X1934" "X1935" "X1936"
[1936] "X1937" "X1938" "X1939" "X1940" "X1941" "X1942" "X1943" "X1944" "X1945"
[1945] "X1946" "X1947" "X1948" "X1949" "X1950" "X1951" "X1952" "X1953" "X1954"
[1954] "X1955" "X1956" "X1957" "X1958" "X1959" "X1960" "X1961" "X1962" "X1963"
[1963] "X1964" "X1965" "X1966" "X1967" "X1968" "X1969" "X1970" "X1971" "X1972"
[1972] "X1973" "X1974" "X1975" "X1976" "X1977" "X1978" "X1979" "X1980" "X1981"
[1981] "X1982" "X1983" "X1984" "X1985" "X1986" "X1987" "X1988" "X1989" "X1990"
[1990] "X1991" "X1992" "X1993" "X1994" "X1995" "X1996" "X1997" "X1998" "X1999"
[1999] "X2000" "aaa"  
Number of executions = 10
[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.8215838

When C=0.001, the MCC value is 0.8215838	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.6396021

When C=0.01, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.6396021

When C=0.1, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.6396021

When C=1, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.6396021

When C=10, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.821583836257749
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.945537
ROC AUC 		0.8857143


TOTAL:

 FN =  1  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.478 	 0.800 	 0.750 	 0.857 	 0.600		 0.946		0.886

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.6928203

When C=0.001, the MCC value is 0.6928203	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.3175426

When C=0.01, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.3175426

When C=0.1, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.3175426

When C=1, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.3175426

When C=10, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.692820323027551
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.805346
ROC AUC 		0.7428571


TOTAL:

 FN =  2  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.507 	 0.769 	 0.750 	 0.714 	 0.800		 0.805		0.743

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.5070926

When C=0.001, the MCC value is 0.5070926	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.5070926

When C=0.01, the MCC value is 0.5070926	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.5070926

When C=0.1, the MCC value is 0.5070926	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.5070926

When C=1, the MCC value is 0.5070926	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.5070926

When C=10, the MCC value is 0.5070926	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.50709255283711
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.990469
ROC AUC 		0.95


TOTAL:

 FN =  1  /  10 	 (truth == 1) & (prediction < threshold)
 TP =  9  /  10 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  2 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  2 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.775 	 0.947 	 0.917 	 0.900 	 1.000		 0.990		0.950

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.8571429

When C=0.001, the MCC value is 0.8571429	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.8571429

When C=0.01, the MCC value is 0.8571429	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.8571429

When C=0.1, the MCC value is 0.8571429	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.8571429

When C=1, the MCC value is 0.8571429	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.8571429

When C=10, the MCC value is 0.8571429	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.857142857142857
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8736513
ROC AUC 		0.7714286


TOTAL:

 FN =  1  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.076 	 0.706 	 0.583 	 0.857 	 0.200		 0.874		0.771

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.4260064

When C=0.001, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.6388889

When C=0.01, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.6388889

When C=0.1, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.6388889

When C=1, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.6388889

When C=10, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)

The best C value is 0.01, corresponding to MCC=0.638888888888889
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.01) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8598815
ROC AUC 		0.8571429


TOTAL:

 FN =  0  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.837 	 0.933 	 0.917 	 1.000 	 0.800		 0.860		0.857

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=0.001, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=0.01, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=0.1, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=1, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=10, the MCC value is 0.675	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.675
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8927539
ROC AUC 		0.78125


TOTAL:

 FN =  0  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  0  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.000 	 0.800 	 0.667 	 1.000 	 0.000		 0.893		0.781

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.2828895

When C=0.001, the MCC value is 0.2828895	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.2828895

When C=0.01, the MCC value is 0.2828895	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.2828895

When C=0.1, the MCC value is 0.2828895	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.2828895

When C=1, the MCC value is 0.2828895	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.2828895

When C=10, the MCC value is 0.2828895	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.282889474930502
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.8608111
ROC AUC 		0.6875


TOTAL:

 FN =  2  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.250 	 0.750 	 0.667 	 0.750 	 0.500		 0.861		0.688

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.4260064

When C=0.001, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.4260064

When C=0.01, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.4260064

When C=0.1, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.4260064

When C=1, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.4260064

When C=10, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.426006433615129
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	1
ROC AUC 		1


TOTAL:

 FN =  0  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.426 	 0.842 	 0.750 	 1.000 	 0.250		 1.000		1.000

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 1

When C=0.001, the MCC value is 1	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=0.01, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=0.1, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=1, the MCC value is 0.675	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.675

When C=10, the MCC value is 0.675	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=1
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	1
ROC AUC 		1


TOTAL:

 FN =  0  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.683 	 0.875 	 0.833 	 1.000 	 0.600		 1.000		1.000

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 

[Imbalance of this dataset]
[class: 0  #elements = 22]
35.48%
[class: 1  #elements = 40]
64.52%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter C start]
[Training the SVM model (with C=0.001) on training set & applying the SVM model to validation set]

MCC = 0.7784989

When C=0.001, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.01) on training set & applying the SVM model to validation set]

MCC = 0.7784989

When C=0.01, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=0.1) on training set & applying the SVM model to validation set]

MCC = 0.7784989

When C=0.1, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=1) on training set & applying the SVM model to validation set]

MCC = 0.7784989

When C=1, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)
[Training the SVM model (with C=10) on training set & applying the SVM model to validation set]

MCC = 0.7784989

When C=10, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

The best C value is 0.001, corresponding to MCC=0.778498944161523
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 

[Training the SVM model (with the OPTIMIZED hyper-parameter C=0.001) on training set & applying the SVM to the test set]

PR AUC (integral) 	0.9579092
ROC AUC 		0.8518519


TOTAL:

 FN =  2  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.683 	 0.875 	 0.833 	 0.778 	 1.000		 0.958		0.852




=== final results ===
Number of executions = 10
         MCC F1_score accuracy TP_rate TN_rate PR_AUC ROC_AUC
mean    0.47     0.83     0.77    0.89    0.57   0.92    0.85
std.dev 0.29     0.08     0.11    0.11    0.34   0.07    0.11


=== === === ===
fileName: ../data/myColonCancerDataset9.csv
targetName: aaa
script_dir: .
Read data from file ../data/myColonCancerDataset9.csv
Number of executions = 10
[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=1, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=2, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.843274

When k=3, the MCC value is 0.843274	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=4, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=5, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=6, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=7, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=8, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=9, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=10, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=11, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=12, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=13, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=14, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=15, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0

When k=16, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0

When k=17, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0

When k=18, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0

When k=19, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0

When k=22, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0

When k=24, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0

When k=25, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0

When k=26, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0

When k=27, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 3, corresponding to MCC=0.843274042711568
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=3) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.736495
ROC AUC 		0.7285714


TOTAL:

 FN =  1  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.478 	 0.800 	 0.750 	 0.857 	 0.600		 0.736		0.729

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.2828895

When k=1, the MCC value is 0.2828895	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.6172134

When k=2, the MCC value is 0.6172134	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.3857584

When k=3, the MCC value is 0.3857584	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.3857584

When k=4, the MCC value is 0.3857584	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=5, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.2777778

When k=6, the MCC value is 0.2777778	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=7, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.2777778

When k=8, the MCC value is 0.2777778	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.1581139

When k=9, the MCC value is 0.1581139	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.1581139

When k=10, the MCC value is 0.1581139	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.2777778

When k=11, the MCC value is 0.2777778	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=12, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=13, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=14, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=15, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=16, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=17, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=18, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=19, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0.4330127

When k=20, the MCC value is 0.4330127	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=21, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0.1776673

When k=22, the MCC value is 0.1776673	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=23, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0.2777778

When k=24, the MCC value is 0.2777778	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=25, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=26, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0.843274

When k=27, the MCC value is 0.843274	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0.03042903

When k=28, the MCC value is 0.03042903	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = -0.08333333

When k=29, the MCC value is -0.08333333	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0.6388889

When k=30, the MCC value is 0.6388889	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 27, corresponding to MCC=0.843274042711568
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=27) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.7743962
ROC AUC 		0.5555556


TOTAL:

 FN =  2  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.111 	 0.778 	 0.667 	 0.778 	 0.333		 0.774		0.556

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=1, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=2, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=3, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=4, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=5, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=6, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=7, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=8, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=9, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=10, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=11, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=12, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=13, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=14, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=15, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=16, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=17, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=18, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0

When k=19, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0

When k=22, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0

When k=24, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0

When k=25, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0

When k=26, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0

When k=27, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 4, corresponding to MCC=0.539359889970594
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=4) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.736495
ROC AUC 		0.7285714


TOTAL:

 FN =  1  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.478 	 0.800 	 0.750 	 0.857 	 0.600		 0.736		0.729

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=1, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=2, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=3, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=4, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=5, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=6, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=7, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.7784989

When k=8, the MCC value is 0.7784989	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.4090909

When k=9, the MCC value is 0.4090909	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.4090909

When k=10, the MCC value is 0.4090909	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0

When k=11, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0

When k=12, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0

When k=13, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0

When k=14, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0

When k=15, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0

When k=16, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0

When k=17, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0

When k=18, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0

When k=19, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0

When k=22, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0

When k=24, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0

When k=25, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0

When k=26, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0

When k=27, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 1, corresponding to MCC=0.778498944161523
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=1) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.4905465
ROC AUC 		0.6142857


TOTAL:

 FN =  1  /  5 	 (truth == 1) & (prediction < threshold)
 TP =  4  /  5 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  7 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  7 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.239 	 0.615 	 0.583 	 0.800 	 0.429		 0.491		0.614

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.4147575

When k=1, the MCC value is 0.4147575	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.2195775

When k=2, the MCC value is 0.2195775	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=3, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.35

When k=4, the MCC value is 0.35	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=5, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=6, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=7, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=8, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=9, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=10, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=11, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=12, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=13, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=14, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=15, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=16, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=17, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=18, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=19, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=20, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=21, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=22, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=24, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=25, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=26, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=27, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 16, corresponding to MCC=0.539359889970594
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=16) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.9
ROC AUC 		0.8333333


TOTAL:

 FN =  0  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  9  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.775 	 0.947 	 0.917 	 1.000 	 0.667		 0.900		0.833

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.4260064

When k=1, the MCC value is 0.4260064	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.1776673

When k=2, the MCC value is 0.1776673	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=3, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=4, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=5, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=6, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=7, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.4330127

When k=8, the MCC value is 0.4330127	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=9, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=10, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=11, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.4330127

When k=12, the MCC value is 0.4330127	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=13, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=14, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.6396021

When k=15, the MCC value is 0.6396021	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.4330127

When k=16, the MCC value is 0.4330127	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0

When k=17, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0.4330127

When k=18, the MCC value is 0.4330127	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0

When k=19, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0

When k=22, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0

When k=24, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0

When k=25, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0

When k=26, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0

When k=27, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 3, corresponding to MCC=0.639602149066831
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=3) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.4905465
ROC AUC 		0.6142857


TOTAL:

 FN =  1  /  5 	 (truth == 1) & (prediction < threshold)
 TP =  4  /  5 	 (truth == 1) & (prediction >= threshold)

 FP =  4  /  7 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  7 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.239 	 0.615 	 0.583 	 0.800 	 0.429		 0.491		0.614

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.8539126

When k=1, the MCC value is 0.8539126	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.8539126

When k=2, the MCC value is 0.8539126	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.7319251

When k=3, the MCC value is 0.7319251	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.625

When k=4, the MCC value is 0.625	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.536745

When k=5, the MCC value is 0.536745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=6, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.675

When k=7, the MCC value is 0.675	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=8, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.843274

When k=9, the MCC value is 0.843274	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=10, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.6928203

When k=11, the MCC value is 0.6928203	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0

When k=12, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0

When k=13, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0

When k=14, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0

When k=15, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0

When k=16, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0

When k=17, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0

When k=18, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0

When k=19, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0

When k=22, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=24, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0

When k=25, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0

When k=26, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0

When k=27, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 1, corresponding to MCC=0.853912563829967
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=1) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.8
ROC AUC 		0.75


TOTAL:

 FN =  0  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.632 	 0.889 	 0.833 	 1.000 	 0.500		 0.800		0.750

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.547619

When k=1, the MCC value is 0.547619	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.8539126

When k=2, the MCC value is 0.8539126	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.2195775

When k=3, the MCC value is 0.2195775	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.2195775

When k=4, the MCC value is 0.2195775	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=5, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=6, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=7, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=8, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=9, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=10, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=11, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.2253745

When k=12, the MCC value is 0.2253745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.03289758

When k=13, the MCC value is 0.03289758	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.4605662

When k=14, the MCC value is 0.4605662	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.4605662

When k=15, the MCC value is 0.4605662	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.3118048

When k=16, the MCC value is 0.3118048	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0.4605662

When k=17, the MCC value is 0.4605662	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0.4605662

When k=18, the MCC value is 0.4605662	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0

When k=19, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0

When k=22, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0

When k=23, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0

When k=24, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0

When k=25, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0.3118048

When k=26, the MCC value is 0.3118048	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0

When k=27, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0

When k=28, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 2, corresponding to MCC=0.853912563829967
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=2) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.981093
ROC AUC 		0.9


TOTAL:

 FN =  2  /  10 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  10 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  2 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  2 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.632 	 0.889 	 0.833 	 0.800 	 1.000		 0.981		0.900

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=1, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.536745

When k=2, the MCC value is 0.536745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=3, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=4, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=5, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=6, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=7, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=8, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=9, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=10, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=11, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=12, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=13, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=14, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=15, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=16, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=17, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=18, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0.3651484

When k=19, the MCC value is 0.3651484	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0.10113

When k=20, the MCC value is 0.10113	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0.6928203

When k=21, the MCC value is 0.6928203	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=22, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0.536745

When k=23, the MCC value is 0.536745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = 0.536745

When k=24, the MCC value is 0.536745	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0.3

When k=25, the MCC value is 0.3	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0.3

When k=26, the MCC value is 0.3	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0.3

When k=27, the MCC value is 0.3	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0.500694

When k=28, the MCC value is 0.500694	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0.3175426

When k=29, the MCC value is 0.3175426	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0.35

When k=30, the MCC value is 0.35	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0.6928203

When k=31, the MCC value is 0.6928203	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0.5393599

When k=32, the MCC value is 0.5393599	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 21, corresponding to MCC=0.692820323027551
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=21) on training set & applying the kNN to the test set]

PR AUC (integral) 	1
ROC AUC 		1


TOTAL:

 FN =  0  /  11 	 (truth == 1) & (prediction < threshold)
 TP =  11  /  11 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  1 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  1 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      1.000 	 1.000 	 1.000 	 1.000 	 1.000		 1.000		1.000

[Dataset size]
number of data instances (rows) = 62 
number of features (columns) = 2000 
[1] "This vector is not binary. The imbalance_retriever() function will stop here"

[Imbalance of this dataset]
[class:   #elements = NA]
NA%
[class:   #elements = NA]
NA%

training_set_perce = 60% 
validation_set_perce = 20% 
test_set_perce = 20% 
[Creating the subsets for the values]
[Creating the subsets for the labels "1"-"0"]

[Optimization of the hyper-parameter k start]

[Training the kNN model (with k=1) on training set & applying the kNN model to validation set]

MCC = -0.2335497

When k=1, the MCC value is -0.2335497	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=2) on training set & applying the kNN model to validation set]

MCC = 0.1333333

When k=2, the MCC value is 0.1333333	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=3) on training set & applying the kNN model to validation set]

MCC = 0

When k=3, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=4) on training set & applying the kNN model to validation set]

MCC = -0.1581139

When k=4, the MCC value is -0.1581139	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=5) on training set & applying the kNN model to validation set]

MCC = 0.5270463

When k=5, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=6) on training set & applying the kNN model to validation set]

MCC = -0.1581139

When k=6, the MCC value is -0.1581139	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=7) on training set & applying the kNN model to validation set]

MCC = 0

When k=7, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=8) on training set & applying the kNN model to validation set]

MCC = 0

When k=8, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=9) on training set & applying the kNN model to validation set]

MCC = 0

When k=9, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=10) on training set & applying the kNN model to validation set]

MCC = 0.5270463

When k=10, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=11) on training set & applying the kNN model to validation set]

MCC = 0

When k=11, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=12) on training set & applying the kNN model to validation set]

MCC = 0

When k=12, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=13) on training set & applying the kNN model to validation set]

MCC = 0

When k=13, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=14) on training set & applying the kNN model to validation set]

MCC = 0

When k=14, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=15) on training set & applying the kNN model to validation set]

MCC = 0

When k=15, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=16) on training set & applying the kNN model to validation set]

MCC = 0.5270463

When k=16, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=17) on training set & applying the kNN model to validation set]

MCC = 0

When k=17, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=18) on training set & applying the kNN model to validation set]

MCC = -0.1581139

When k=18, the MCC value is -0.1581139	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=19) on training set & applying the kNN model to validation set]

MCC = 0.5270463

When k=19, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=20) on training set & applying the kNN model to validation set]

MCC = 0

When k=20, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=21) on training set & applying the kNN model to validation set]

MCC = 0

When k=21, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=22) on training set & applying the kNN model to validation set]

MCC = 0.5270463

When k=22, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=23) on training set & applying the kNN model to validation set]

MCC = 0.2724746

When k=23, the MCC value is 0.2724746	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=24) on training set & applying the kNN model to validation set]

MCC = -0.3

When k=24, the MCC value is -0.3	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=25) on training set & applying the kNN model to validation set]

MCC = 0.2724746

When k=25, the MCC value is 0.2724746	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=26) on training set & applying the kNN model to validation set]

MCC = 0.2724746

When k=26, the MCC value is 0.2724746	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=27) on training set & applying the kNN model to validation set]

MCC = 0.5270463

When k=27, the MCC value is 0.5270463	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=28) on training set & applying the kNN model to validation set]

MCC = 0.2724746

When k=28, the MCC value is 0.2724746	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=29) on training set & applying the kNN model to validation set]

MCC = 0

When k=29, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=30) on training set & applying the kNN model to validation set]

MCC = 0

When k=30, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=31) on training set & applying the kNN model to validation set]

MCC = 0

When k=31, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=32) on training set & applying the kNN model to validation set]

MCC = 0

When k=32, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=33) on training set & applying the kNN model to validation set]

MCC = 0

When k=33, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=34) on training set & applying the kNN model to validation set]

MCC = 0

When k=34, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=35) on training set & applying the kNN model to validation set]

MCC = 0

When k=35, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=36) on training set & applying the kNN model to validation set]

MCC = 0

When k=36, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=37) on training set & applying the kNN model to validation set]

MCC = 0

When k=37, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=38) on training set & applying the kNN model to validation set]

MCC = 0

When k=38, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=39) on training set & applying the kNN model to validation set]

MCC = 0

When k=39, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=40) on training set & applying the kNN model to validation set]

MCC = 0

When k=40, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=41) on training set & applying the kNN model to validation set]

MCC = 0

When k=41, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=42) on training set & applying the kNN model to validation set]

MCC = 0

When k=42, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=43) on training set & applying the kNN model to validation set]

MCC = 0

When k=43, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=44) on training set & applying the kNN model to validation set]

MCC = 0

When k=44, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=45) on training set & applying the kNN model to validation set]

MCC = 0

When k=45, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=46) on training set & applying the kNN model to validation set]

MCC = 0

When k=46, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=47) on training set & applying the kNN model to validation set]

MCC = 0

When k=47, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=48) on training set & applying the kNN model to validation set]

MCC = 0

When k=48, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=49) on training set & applying the kNN model to validation set]

MCC = 0

When k=49, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=50) on training set & applying the kNN model to validation set]

MCC = 0

When k=50, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=51) on training set & applying the kNN model to validation set]

MCC = 0

When k=51, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=52) on training set & applying the kNN model to validation set]

MCC = 0

When k=52, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=53) on training set & applying the kNN model to validation set]

MCC = 0

When k=53, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=54) on training set & applying the kNN model to validation set]

MCC = 0

When k=54, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=55) on training set & applying the kNN model to validation set]

MCC = 0

When k=55, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=56) on training set & applying the kNN model to validation set]

MCC = 0

When k=56, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=57) on training set & applying the kNN model to validation set]

MCC = 0

When k=57, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=58) on training set & applying the kNN model to validation set]

MCC = 0

When k=58, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=59) on training set & applying the kNN model to validation set]

MCC = 0

When k=59, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=60) on training set & applying the kNN model to validation set]

MCC = 0

When k=60, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=61) on training set & applying the kNN model to validation set]

MCC = 0

When k=61, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=62) on training set & applying the kNN model to validation set]

MCC = 0

When k=62, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=63) on training set & applying the kNN model to validation set]

MCC = 0

When k=63, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=64) on training set & applying the kNN model to validation set]

MCC = 0

When k=64, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=65) on training set & applying the kNN model to validation set]

MCC = 0

When k=65, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=66) on training set & applying the kNN model to validation set]

MCC = 0

When k=66, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=67) on training set & applying the kNN model to validation set]

MCC = 0

When k=67, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=68) on training set & applying the kNN model to validation set]

MCC = 0

When k=68, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=69) on training set & applying the kNN model to validation set]

MCC = 0

When k=69, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=70) on training set & applying the kNN model to validation set]

MCC = 0

When k=70, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=71) on training set & applying the kNN model to validation set]

MCC = 0

When k=71, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=72) on training set & applying the kNN model to validation set]

MCC = 0

When k=72, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=73) on training set & applying the kNN model to validation set]

MCC = 0

When k=73, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=74) on training set & applying the kNN model to validation set]

MCC = 0

When k=74, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=75) on training set & applying the kNN model to validation set]

MCC = 0

When k=75, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=76) on training set & applying the kNN model to validation set]

MCC = 0

When k=76, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=77) on training set & applying the kNN model to validation set]

MCC = 0

When k=77, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=78) on training set & applying the kNN model to validation set]

MCC = 0

When k=78, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=79) on training set & applying the kNN model to validation set]

MCC = 0

When k=79, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=80) on training set & applying the kNN model to validation set]

MCC = 0

When k=80, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=81) on training set & applying the kNN model to validation set]

MCC = 0

When k=81, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=82) on training set & applying the kNN model to validation set]

MCC = 0

When k=82, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=83) on training set & applying the kNN model to validation set]

MCC = 0

When k=83, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=84) on training set & applying the kNN model to validation set]

MCC = 0

When k=84, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=85) on training set & applying the kNN model to validation set]

MCC = 0

When k=85, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=86) on training set & applying the kNN model to validation set]

MCC = 0

When k=86, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=87) on training set & applying the kNN model to validation set]

MCC = 0

When k=87, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=88) on training set & applying the kNN model to validation set]

MCC = 0

When k=88, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=89) on training set & applying the kNN model to validation set]

MCC = 0

When k=89, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=90) on training set & applying the kNN model to validation set]

MCC = 0

When k=90, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=91) on training set & applying the kNN model to validation set]

MCC = 0

When k=91, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=92) on training set & applying the kNN model to validation set]

MCC = 0

When k=92, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=93) on training set & applying the kNN model to validation set]

MCC = 0

When k=93, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=94) on training set & applying the kNN model to validation set]

MCC = 0

When k=94, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=95) on training set & applying the kNN model to validation set]

MCC = 0

When k=95, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=96) on training set & applying the kNN model to validation set]

MCC = 0

When k=96, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=97) on training set & applying the kNN model to validation set]

MCC = 0

When k=97, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=98) on training set & applying the kNN model to validation set]

MCC = 0

When k=98, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=99) on training set & applying the kNN model to validation set]

MCC = 0

When k=99, the MCC value is 0	 (worst possible: -1; best possible: +1)

[Training the kNN model (with k=100) on training set & applying the kNN model to validation set]

MCC = 0

When k=100, the MCC value is 0	 (worst possible: -1; best possible: +1)

The best k value is 5, corresponding to MCC=0.52704627669473
[Optimization end]


 @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ 
[Training the kNN model (with the OPTIMIZED hyper-parameter k=5) on training set & applying the kNN to the test set]

PR AUC (integral) 	0.7777778
ROC AUC 		0.8


TOTAL:

 FN =  0  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.683 	 0.875 	 0.833 	 1.000 	 0.600		 0.778		0.800




=== final results ===
Number of executions = 10
         MCC F1_score accuracy TP_rate TN_rate PR_AUC ROC_AUC
mean    0.53     0.82     0.78    0.89    0.62   0.77    0.75
std.dev 0.27     0.13     0.14    0.10    0.23   0.17    0.14


=== === === ===
fileName: ../data/myColonCancerDataset9.csv
targetName: aaa
script_dir: .
Read data from file ../data/myColonCancerDataset9.csv
Number of executions = 10
perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.8592442
ROC AUC 		0.7222222


TOTAL:

 FN =  2  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.408 	 0.824 	 0.750 	 0.778 	 0.667		 0.859		0.722

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.7743962
ROC AUC 		0.5555556


TOTAL:

 FN =  2  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  1  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.111 	 0.778 	 0.667 	 0.778 	 0.333		 0.774		0.556

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.7381831
ROC AUC 		0.625


TOTAL:

 FN =  2  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  2  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  2  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.250 	 0.750 	 0.667 	 0.750 	 0.500		 0.738		0.625

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.9197146
ROC AUC 		0.8125


TOTAL:

 FN =  3  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.598 	 0.769 	 0.750 	 0.625 	 1.000		 0.920		0.812

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.8290966
ROC AUC 		0.75


TOTAL:

 FN =  2  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.478 	 0.800 	 0.750 	 0.750 	 0.750		 0.829		0.750

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.875
ROC AUC 		0.9


TOTAL:

 FN =  0  /  7 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  7 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  5 	 (truth == 0) & (prediction >= threshold)
 TN =  4  /  5 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.837 	 0.933 	 0.917 	 1.000 	 0.800		 0.875		0.900

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.6131831
ROC AUC 		0.6666667


TOTAL:

 FN =  1  /  6 	 (truth == 1) & (prediction < threshold)
 TP =  5  /  6 	 (truth == 1) & (prediction >= threshold)

 FP =  3  /  6 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  6 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.354 	 0.714 	 0.667 	 0.833 	 0.500		 0.613		0.667

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.9842442
ROC AUC 		0.9444444


TOTAL:

 FN =  1  /  9 	 (truth == 1) & (prediction < threshold)
 TP =  8  /  9 	 (truth == 1) & (prediction >= threshold)

 FP =  0  /  3 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  3 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.816 	 0.941 	 0.917 	 0.889 	 1.000		 0.984		0.944

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.8290966
ROC AUC 		0.75


TOTAL:

 FN =  2  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  6  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.478 	 0.800 	 0.750 	 0.750 	 0.750		 0.829		0.750

perce_training_set = 80%[1] "dim(training_set)"
[1]   50 2000
[1] "dim(test_set)"
[1]   12 2000

PR AUC (integral) 	0.8602289
ROC AUC 		0.8125


TOTAL:

 FN =  1  /  8 	 (truth == 1) & (prediction < threshold)
 TP =  7  /  8 	 (truth == 1) & (prediction >= threshold)

 FP =  1  /  4 	 (truth == 0) & (prediction >= threshold)
 TN =  3  /  4 	 (truth == 0) & (prediction < threshold)



 @@@ Test set @@@ 	 MCC 	 F1_score 	 accuracy 	 TP_rate 	 TN_rate 	 PR AUC 	 ROC AUC
@@@ Test set @@@      0.625 	 0.875 	 0.833 	 0.875 	 0.750		 0.860		0.812




=== final results ===
Number of executions = 10
         MCC F1_score accuracy TP_rate TN_rate PR_AUC ROC_AUC
mean    0.50     0.82     0.77    0.80    0.70   0.83    0.75
std.dev 0.23     0.08     0.09    0.10    0.21   0.10    0.12


=== === === ===

Recap

:: XgBoost ::
mean    0.31     0.80     0.72    0.88    0.37   0.85    0.74
std.dev 0.33     0.10     0.13    0.14    0.19   0.12    0.13

:: SVM radial ::
mean    0.34     0.79     0.72    0.89    0.42   0.86    0.79
std.dev 0.27     0.07     0.09    0.12    0.31   0.09    0.12

:: SVM linear ::
mean    0.47     0.83     0.77    0.89    0.57   0.92    0.85
std.dev 0.29     0.08     0.11    0.11    0.34   0.07    0.11

:: k-NN ::
mean    0.53     0.82     0.78    0.89    0.62   0.77    0.75
std.dev 0.27     0.13     0.14    0.10    0.23   0.17    0.14

:: decision tree ::
mean    0.50     0.82     0.77    0.80    0.70   0.83    0.75
std.dev 0.23     0.08     0.09    0.10    0.21   0.10    0.12

